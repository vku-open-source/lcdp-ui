{
  "backgroundColor": "#ffffff",
  "borderColor": "#ffffff",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 93,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{getAllcommunity.data }}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "navigateToPostForm"
    }
  ],
  "events": [
    "navigateToPostForm"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "wy4giwctor",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 39,
  "mobileLeftColumn": 9,
  "mobileRightColumn": 32,
  "mobileTopRow": 9,
  "navigateToPostForm": "{{navigateTo('post_community_form', {}, 'SAME_WINDOW');}}",
  "needsErrorInfo": false,
  "parentColumnSpace": 20.125,
  "parentId": "sdbe7q9nm8",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "@charset \"UTF-8\";\n.app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  background-color: #ffffff;\n  align-items: center; /* Căn giữa nội dung */\n}\n\nh2 {\n  text-align: center;\n  /* Căn giữa tiêu đề */\n  margin-bottom: 20px; /* Tạo khoảng cách dưới tiêu đề */\n}\n\n.search-container {\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  /* Đảm bảo khung tìm kiếm chiếm toàn bộ chiều rộng */\n}\n\n.search-container input {\n  width: 20%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  font-size: 14px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.filter-container select,\n.filter-container input {\n  margin-right: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.post-card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n  transition: transform 0.2s;\n  width: 80%; /* Đảm bảo thẻ bài đăng chiếm toàn bộ chiều rộng */\n}\n\n.post-card:hover {\n  transform: scale(1.02);\n}\n\n.post-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.post-content {\n  font-size: 14px;\n  color: #555;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  color: #999;\n}\n\n.post-type {\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n.type-evacuation_guide,\n.type-first_aid_guide,\n.type-safety_guide {\n  color: #28a745; /* Màu xanh lá */\n}\n\n.type-emergency_alert {\n  color: #dc3545; /* Màu đỏ */\n}\n\n.button-container {\n  text-align: right;\n}\n\n.button-container button {\n  margin: 0 10px;\n  border-radius: var(--appsmith-theme-borderRadius);\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n}\n\nbody {\n  background-color: #f7f9fc; /* Màu nền nhẹ cho toàn bộ trang */\n  font-family: Arial, sans-serif; /* Font chữ dễ đọc */\n}\n\n.post-detail {\n  padding: 20px;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  max-width: 800px; /* Tăng chiều rộng tối đa */\n  margin: 20px auto; /* Căn giữa */\n  position: relative; /* Để nút Back có thể được định vị */\n}\n\n.post-card {\n  padding: 20px;\n  border: none; /* Bỏ viền cho card */\n  margin-bottom: 20px;\n}\n\nh2 {\n  margin-bottom: 20px;\n  text-align: center; /* Căn giữa tiêu đề */\n}\n\nstrong {\n  color: #333; /* Màu cho các nhãn */\n}\n\n.post-footer {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.notification-channels {\n  margin-top: 10px;\n}\n\n.notification-channels button {\n  margin: 5px;\n}\n\nbutton {\n  cursor: pointer;\n}\n\n/* Thêm một số kiểu cho các phần tử khác */\np {\n  line-height: 1.6; /* Tăng khoảng cách giữa các dòng */\n  margin: 10px 0; /* Tạo khoảng cách giữa các đoạn */\n}\n\n.delete-post-button {\n  background-color: red; /* Màu nền đỏ */\n  border-color: red; /* Màu viền đỏ */\n  color: white; /* Màu chữ trắng */\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, message } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nconst fetchPosts = async () => {\n  const response = await fetch('http://34.67.28.143:1337/api/communities?filters[type][$ne]=emergency_alert&populate=*');\n  if (!response.ok) throw new Error('Failed to fetch posts');\n  return await response.json();\n};\nconst PostDetail = ({\n  post,\n  onBack\n}) => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-detail\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    onClick: onBack,\n    style: {\n      position: 'absolute',\n      top: '20px',\n      left: '20px'\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Post Details\"), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Title:\"), \" \", post.title), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Content:\"), \" \", post.content), post.attachments && post.attachments.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-images\"\n  }, post.attachments.map(attachment => /*#__PURE__*/React.createElement(\"img\", {\n    key: attachment.id,\n    src: `http://34.67.28.143:1337${attachment.formats?.medium?.url || attachment.url}`,\n    alt: attachment.name || 'Attachment',\n    style: {\n      width: '100%',\n      maxHeight: '500px',\n      objectFit: 'cover',\n      marginBottom: '20px'\n    }\n  }))), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Type:\"), \" \", post.type.replace('_', ' ')), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Priority:\"), \" \", post.priority), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Created At:\"), \" \", new Date(post.createdAt).toLocaleString()), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Updated At:\"), \" \", new Date(post.updatedAt).toLocaleString()));\n};\nconst App = () => {\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const [selectedType, setSelectedType] = React.useState('all');\n  const [selectedPriority, setSelectedPriority] = React.useState('all');\n  const [startDate, setStartDate] = React.useState('');\n  const [endDate, setEndDate] = React.useState('');\n  const [sortOrder, setSortOrder] = React.useState('asc');\n  const [selectedPost, setSelectedPost] = React.useState(null);\n  const [data, setData] = React.useState([]);\n  const handleAlertClick = () => {\n    appsmith.triggerEvent(\"navigateToPostForm\");\n  };\n  const fetchData = async () => {\n    try {\n      const result = await fetchPosts();\n      setData(result.data);\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to load posts.');\n    }\n  };\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n  const filteredData = data.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === 'all' || post.type === selectedType;\n    const matchesPriority = selectedPriority === 'all' || post.priority === selectedPriority;\n    return matchesSearch && matchesType && matchesPriority;\n  });\n  const sortedData = filteredData.sort((a, b) => {\n    const dateA = new Date(a.createdAt);\n    const dateB = new Date(b.createdAt);\n    return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;\n  });\n  const handleViewPost = post => setSelectedPost(post);\n  const handleBack = () => setSelectedPost(null);\n  if (selectedPost) {\n    return /*#__PURE__*/React.createElement(PostDetail, {\n      post: selectedPost,\n      onBack: handleBack\n    });\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\"\n  }, /*#__PURE__*/React.createElement(\"h2\", null, \"C\\u1ED9ng \\u0110\\u1ED3ng H\\u01B0\\u1EDBng D\\u1EABn \\u1EE8ng Ph\\xF3 Kh\\u1EA9n C\\u1EA5p\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-container\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search posts...\",\n    value: searchTerm,\n    onChange: e => setSearchTerm(e.target.value)\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter-container\"\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedType,\n    onChange: e => setSelectedType(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\"\n  }, \"All Types\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"evacuation_guide\"\n  }, \"Evacuation Guide\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"first_aid_guide\"\n  }, \"First Aid Guide\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"safety_guide\"\n  }, \"Safety Guide\")), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedPriority,\n    onChange: e => setSelectedPriority(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\"\n  }, \"All Priorities\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"high\"\n  }, \"High\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"medium\"\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"low\"\n  }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"urgent\"\n  }, \"Urgent\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: startDate,\n    onChange: e => setStartDate(e.target.value),\n    placeholder: \"Start Date\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: endDate,\n    onChange: e => setEndDate(e.target.value),\n    placeholder: \"End Date\"\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    value: sortOrder,\n    onChange: e => setSortOrder(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"asc\"\n  }, \"Sort by Date (Asc)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"desc\"\n  }, \"Sort by Date (Desc)\"))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginTop: '20px',\n      marginBottom: '20px'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    danger: true,\n    onClick: handleAlertClick\n  }, \"C\\u1EA3nh b\\xE1o C\\u1ED9ng \\u0110\\u1ED3ng\")), sortedData.map(post => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-card\",\n    key: post.id\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-title\"\n  }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-content\"\n  }, post.content), post.attachments && post.attachments.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-images\"\n  }, post.attachments.map(attachment => /*#__PURE__*/React.createElement(\"img\", {\n    key: attachment.id,\n    src: `http://34.67.28.143:1337${attachment.formats?.medium?.url || attachment.url}`,\n    alt: attachment.name || 'Attachment',\n    style: {\n      width: '100%',\n      maxHeight: '400px',\n      objectFit: 'cover',\n      marginBottom: '10px',\n      marginTop: '20px'\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-footer\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, new Date(post.createdAt).toLocaleDateString()), /*#__PURE__*/React.createElement(\"span\", {\n    className: `post-type type-${post.type}`\n  }, post.type.replace('_', ' ')), /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    onClick: () => handleViewPost(post)\n  }, \"Details\")))));\n};\nappsmith.onReady(() => {\n  reactDom.render( /*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  background-color: #ffffff;\n  align-items: center; /* Căn giữa nội dung */\n}\n\nh2 {\n  text-align: center; \n\t/* Căn giữa tiêu đề */\n  margin-bottom: 20px; /* Tạo khoảng cách dưới tiêu đề */\n}\n\n.search-container {\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%; \n\t/* Đảm bảo khung tìm kiếm chiếm toàn bộ chiều rộng */\n}\n\n.search-container input {\n  width: 20%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  font-size: 14px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.filter-container select,\n.filter-container input {\n  margin-right: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.post-card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n  transition: transform 0.2s;\n  width: 80%; /* Đảm bảo thẻ bài đăng chiếm toàn bộ chiều rộng */\n}\n\n.post-card:hover {\n  transform: scale(1.02);\n}\n\n.post-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.post-content {\n  font-size: 14px;\n  color: #555;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  color: #999;\n}\n\n.post-type {\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n.type-evacuation_guide,\n.type-first_aid_guide,\n.type-safety_guide {\n  color: #28a745; /* Màu xanh lá */\n}\n\n.type-emergency_alert {\n  color: #dc3545; /* Màu đỏ */\n}\n\n.button-container {\n  text-align: right;\n}\n\n.button-container button {\n  margin: 0 10px;\n  border-radius: var(--appsmith-theme-borderRadius);\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n}\n\nbody {\n  background-color: #f7f9fc; /* Màu nền nhẹ cho toàn bộ trang */\n  font-family: Arial, sans-serif; /* Font chữ dễ đọc */\n}\n\n.post-detail {\n  padding: 20px;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  max-width: 800px; /* Tăng chiều rộng tối đa */\n  margin: 20px auto; /* Căn giữa */\n  position: relative; /* Để nút Back có thể được định vị */\n}\n\n.post-card {\n  padding: 20px;\n  border: none; /* Bỏ viền cho card */\n  margin-bottom: 20px;\n}\n\nh2 {\n  margin-bottom: 20px;\n  text-align: center; /* Căn giữa tiêu đề */\n}\n\nstrong {\n  color: #333; /* Màu cho các nhãn */\n}\n\n.post-footer {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.notification-channels {\n  margin-top: 10px;\n}\n\n.notification-channels button {\n  margin: 5px;\n}\n\nbutton {\n  cursor: pointer;\n}\n\n/* Thêm một số kiểu cho các phần tử khác */\np {\n  line-height: 1.6; /* Tăng khoảng cách giữa các dòng */\n  margin: 10px 0; /* Tạo khoảng cách giữa các đoạn */\n}\n.delete-post-button {\n  background-color: red; /* Màu nền đỏ */\n  border-color: red; /* Màu viền đỏ */\n  color: white; /* Màu chữ trắng */\n}\n\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, message } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\n\n\n\nconst fetchPosts = async () => {\n  const response = await fetch('http://34.67.28.143:1337/api/communities?filters[type][$ne]=emergency_alert&populate=*');\n  if (!response.ok) throw new Error('Failed to fetch posts');\n  return await response.json();\n};\n\nconst PostDetail = ({ post, onBack }) => {\n  return (\n    <div className=\"post-detail\">\n      <Button type=\"link\" onClick={onBack} style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        Back\n      </Button>\n      <h2>Post Details</h2>\n      <p><strong>Title:</strong> {post.title}</p>\n      <p><strong>Content:</strong> {post.content}</p>\n\t\t\t\t{post.attachments && post.attachments.length > 0 && (\n    <div className=\"post-images\">\n      {post.attachments.map((attachment) => (\n        <img\n          key={attachment.id}\n          src={`http://34.67.28.143:1337${attachment.formats?.medium?.url || attachment.url}`}\n          alt={attachment.name || 'Attachment'}\n          style={{ width: '100%', maxHeight: '500px', objectFit: 'cover', marginBottom: '20px' }}\n        />\n      ))}\n    </div>\n  )}\n      <p><strong>Type:</strong> {post.type.replace('_', ' ')}</p>\n      <p><strong>Priority:</strong> {post.priority}</p>\n      <p><strong>Created At:</strong> {new Date(post.createdAt).toLocaleString()}</p>\n      <p><strong>Updated At:</strong> {new Date(post.updatedAt).toLocaleString()}</p>\n    </div>\n  );\n};\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const [selectedType, setSelectedType] = React.useState('all');\n  const [selectedPriority, setSelectedPriority] = React.useState('all');\n  const [startDate, setStartDate] = React.useState('');\n  const [endDate, setEndDate] = React.useState('');\n  const [sortOrder, setSortOrder] = React.useState('asc');\n  const [selectedPost, setSelectedPost] = React.useState(null);\n  const [data, setData] = React.useState([]);\n\t\n\tconst handleAlertClick = () => {\n    appsmith.triggerEvent(\"navigateToPostForm\")\n  };\n\t\n  const fetchData = async () => {\n    try {\n      const result = await fetchPosts();\n      setData(result.data);\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to load posts.');\n    }\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  const filteredData = data.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === 'all' || post.type === selectedType;\n    const matchesPriority = selectedPriority === 'all' || post.priority === selectedPriority;\n    return matchesSearch && matchesType && matchesPriority;\n  });\n\n  const sortedData = filteredData.sort((a, b) => {\n    const dateA = new Date(a.createdAt);\n    const dateB = new Date(b.createdAt);\n    return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;\n  });\n\n  const handleViewPost = (post) => setSelectedPost(post);\n  const handleBack = () => setSelectedPost(null);\n\t\n  if (selectedPost) {\n    return <PostDetail post={selectedPost} onBack={handleBack} />;\n  }\n\n  return (\n    <div className=\"app\">\n      <h2>Cộng Đồng Hướng Dẫn Ứng Phó Khẩn Cấp</h2>\n      <div className=\"search-container\">\n        <input \n          type=\"text\" \n          placeholder=\"Search posts...\" \n          value={searchTerm} \n          onChange={(e) => setSearchTerm(e.target.value)} \n        />\n      </div>\n      <div className=\"filter-container\">\n        <select value={selectedType} onChange={(e) => setSelectedType(e.target.value)}>\n          <option value=\"all\">All Types</option>\n          <option value=\"evacuation_guide\">Evacuation Guide</option>\n          <option value=\"first_aid_guide\">First Aid Guide</option>\n          <option value=\"safety_guide\">Safety Guide</option>\n        </select>\n        <select value={selectedPriority} onChange={(e) => setSelectedPriority(e.target.value)}>\n          <option value=\"all\">All Priorities</option>\n          <option value=\"high\">High</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"low\">Low</option>\n          <option value=\"urgent\">Urgent</option>\n        </select>\n        <input \n          type=\"date\" \n          value={startDate} \n          onChange={(e) => setStartDate(e.target.value)} \n          placeholder=\"Start Date\" \n        />\n        <input \n          type=\"date\" \n          value={endDate} \n          onChange={(e) => setEndDate(e.target.value)} \n          placeholder=\"End Date\" \n        />\n        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>\n          <option value=\"asc\">Sort by Date (Asc)</option>\n          <option value=\"desc\">Sort by Date (Desc)</option>\n        </select>\n\t\t\t\t\n      </div>\n\t\t\t<div style={{ textAlign: 'center', marginTop: '20px' , marginBottom : '20px' }}>\n    <Button type=\"primary\" danger onClick={handleAlertClick}>\n      Cảnh báo Cộng Đồng \n    </Button>\n  </div>\n     {sortedData.map((post) => (\n\t<div className=\"post-card\" key={post.id}>\n    <div className=\"post-title\">{post.title}</div>\n    <div className=\"post-content\">{post.content}</div>\n\t\t\n    {/* Hiển thị ảnh từ attachments (kích thước small) */}\n    {post.attachments && post.attachments.length > 0 && (\n      <div className=\"post-images\">\n        {post.attachments.map((attachment) => (\n          <img\n            key={attachment.id}\n            src={`http://34.67.28.143:1337${attachment.formats?.medium?.url || attachment.url}`}\n            alt={attachment.name || 'Attachment'}\n            style={{ width: '100%', maxHeight: '400px', objectFit: 'cover', marginBottom: '10px',marginTop : '20px' }}\n          />\n        ))}\n      </div>\n    )}\n\n    <div className=\"post-footer\">\n      <span>{new Date(post.createdAt).toLocaleDateString()}</span>\n      <span className={`post-type type-${post.type}`}>{post.type.replace('_', ' ')}</span>\n      <Button type=\"link\" onClick={() => handleViewPost(post)}>\n        Details\n      </Button>\n    </div>\n  </div>\n))}\n    </div>\n  );\n};\n\nappsmith.onReady(() => {\n  reactDom.render(<App />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "wy3e6ciojj",
  "widgetName": "Custom1"
}