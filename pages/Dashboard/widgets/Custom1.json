{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 81,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{\n  \"tips\": [\n    \"Pass data to this widget in the default model field\",\n    \"Access data in the javascript file using the appsmith.model variable\",\n    \"Create events in the widget and trigger them in the javascript file using appsmith.triggerEvent('eventName')\",\n    \"Access data in CSS as var(--appsmith-model-{property-name})\"\n  ],\n\t\"BASE_URL\":\"{{Constants.BACKEND_BASE_URL}}\"\n}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "r79t3lz0zh",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 42,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 7,
  "mobileTopRow": 12,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 16.6875,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 41,
  "srcDoc": {
    "css": ".app {\n  width: calc(1px * var(--appsmith-ui-width));\n  justify-content: center;\n  border-radius: 0px;\n  border: none;\n}\n.app .tip-container {\n  margin-bottom: 20px;\n}\n.app .tip-container h2 {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 700;\n}\n.app .tip-container .tip-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: baseline;\n}\n.app .tip-container .tip-header div {\n  color: #999;\n}\n.app .button-container {\n  text-align: right;\n}\n.app .button-container button {\n  margin: 0 10px;\n  border-radius: var(--appsmith-theme-borderRadius) !important;\n}\n.app .button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n}\n.app .button-container button.reset:not([disabled]) {\n  color: var(--appsmith-theme-primaryColor) !important;\n  border-color: var(--appsmith-theme-primaryColor) !important;\n}",
    "html": "<html>\n    <head>\n        <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no\"\n        />\n        <script src=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.js\"></script>\n        <script src=\"https://api.windy.com/assets/map-forecast/libBoot.js\"></script>\n        <style>\n            #windy {\n                width: 100%;\n                height: 100vh;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"windy\"></div>\n        <script src=\"script.js\"></script>\n    </body>\n</html>",
    "js": "const options = {\n  key: 'GYbeQaRYK4XVcRooZpEZ7kIHnp4xt1wF',\n  // REPLACE WITH YOUR KEY !!!\n  lat: 15.974971273737287,\n  lon: 108.25766301348376,\n  zoom: 6,\n  hourFormat: '12h'\n};\nwindyInit(options, windyAPI => {\n  const {\n    map\n  } = windyAPI; // Lấy đối tượng bản đồ Windy\n\n  // Hàm để thêm marker vào bản đồ\n  const addMarker = (lat, lon, label, type) => {\n    const iconUrl = type === 'warning_earthquake' ? '{{appsmith.model.BASE_URL}}/uploads/earthquake_logo_d58db80f3d.png' : './water_level.svg';\n    console.log(iconUrl);\n    const marker = L.marker([lat, lon], {\n      icon: L.icon({\n        iconUrl,\n        iconSize: [40, 40],\n        // Kích thước biểu tượng\n        iconAnchor: [12, 12] // Điểm neo\n      })\n    }).addTo(map);\n    marker.bindPopup(`<strong>${label}</strong><br>Type: ${type}`);\n  };\n\n  // Gửi yêu cầu API để lấy dữ liệu cảnh báo\n  fetch('http://34.67.28.143:1337/api/warning').then(response => response.json()).then(data => {\n    if (data && data.data) {\n      data.data.forEach(warning => {\n        const {\n          lat,\n          long,\n          label,\n          warning_type\n        } = warning;\n        addMarker(lat, long, label, warning_type);\n      });\n    } else {\n      console.error('Invalid API response');\n    }\n  }).catch(error => {\n    console.error('Error fetching warnings:', error);\n  });\n  const loadBoundaries = geoJsonUrl => {\n    fetch(geoJsonUrl).then(response => response.json()).then(geoJsonData => {\n      // Thêm layer GeoJSON vào bản đồ\n      L.geoJSON(geoJsonData, {\n        style: {\n          color: 'red',\n          // Màu ranh giới\n          weight: 1,\n          // Độ dày đường\n          opacity: 0.2 // Độ trong suốt\n        },\n        onEachFeature: (feature, layer) => {\n          // Hiển thị thông tin khi click vào ranh giới\n          if (feature.properties && feature.properties.name) {\n            layer.bindPopup(`Boundary: ${feature.properties.name}`);\n          }\n        }\n      }).addTo(map);\n    }).catch(error => {\n      console.error('Error loading GeoJSON:', error);\n    });\n  };\n\n  // Gọi hàm để tải ranh giới\n  loadBoundaries('./diaphanhuyen.geojson');\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 10,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".app {\n  width: calc(1px * var(--appsmith-ui-width));\n  justify-content: center;\n  border-radius: 0px;\n  border: none;\n  \n  .tip-container {\n    margin-bottom: 20px;\n\n    h2 {\n      margin-bottom: 20px;\n      font-size: 16px;\n      font-weight: 700;\n    }\n\n    .tip-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: baseline;\n\n      div {\n        color: #999;\n      }\n    }\n  }\n\t\n\t.button-container {\n      text-align: right;\n\n      button {\n        margin: 0 10px;\n        border-radius: var(--appsmith-theme-borderRadius) !important;\n\n        &.primary {\n          background: var(--appsmith-theme-primaryColor) !important;\n        }\n\n        &.reset:not([disabled]) {\n          color: var(--appsmith-theme-primaryColor) !important;\n          border-color: var(--appsmith-theme-primaryColor) !important;\n        }\n      }\n    }\n}\n",
    "html": "<html>\n    <head>\n        <meta\n            name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0, shrink-to-fit=no\"\n        />\n        <script src=\"https://unpkg.com/leaflet@1.4.0/dist/leaflet.js\"></script>\n        <script src=\"https://api.windy.com/assets/map-forecast/libBoot.js\"></script>\n        <style>\n            #windy {\n                width: 100%;\n                height: 100vh;\n            }\n        </style>\n    </head>\n    <body>\n        <div id=\"windy\"></div>\n        <script src=\"script.js\"></script>\n    </body>\n</html>",
    "js": "const options = {\n    key: 'GYbeQaRYK4XVcRooZpEZ7kIHnp4xt1wF', // REPLACE WITH YOUR KEY !!!\n    lat: 15.974971273737287,\n    lon: 108.25766301348376,\n    zoom: 6,\n    hourFormat: '12h',\n};\n\nwindyInit(options, windyAPI => {\n    const { map } = windyAPI; // Lấy đối tượng bản đồ Windy\n\n    // Hàm để thêm marker vào bản đồ\n    const addMarker = (lat, lon, label, type) => {\n        const iconUrl = type === 'warning_earthquake' \n            ? '{{appsmith.model.BASE_URL}}/uploads/earthquake_logo_d58db80f3d.png' \n            : './water_level.svg';\n\t\t\t\tconsole.log(iconUrl)\n        const marker = L.marker([lat, lon], {\n            icon: L.icon({\n                iconUrl,\n                iconSize: [40, 40], // Kích thước biểu tượng\n                iconAnchor: [12, 12], // Điểm neo\n            }),\n        }).addTo(map);\n\n        marker.bindPopup(`<strong>${label}</strong><br>Type: ${type}`);\n    };\n\n    // Gửi yêu cầu API để lấy dữ liệu cảnh báo\n    fetch('http://34.67.28.143:1337/api/warning')\n        .then(response => response.json())\n        .then(data => {\n            if (data && data.data) {\n                data.data.forEach(warning => {\n                    const { lat, long, label, warning_type } = warning;\n                    addMarker(lat, long, label, warning_type);\n                });\n            } else {\n                console.error('Invalid API response');\n            }\n        })\n        .catch(error => {\n            console.error('Error fetching warnings:', error);\n        });\n        const loadBoundaries = (geoJsonUrl) => {\n            fetch(geoJsonUrl)\n                .then(response => response.json())\n                .then(geoJsonData => {\n                    // Thêm layer GeoJSON vào bản đồ\n                    L.geoJSON(geoJsonData, {\n                        style: {\n                            color: 'red', // Màu ranh giới\n                            weight: 1, // Độ dày đường\n                            opacity: 0.2, // Độ trong suốt\n                        },\n                        onEachFeature: (feature, layer) => {\n                            // Hiển thị thông tin khi click vào ranh giới\n                            if (feature.properties && feature.properties.name) {\n                                layer.bindPopup(`Boundary: ${feature.properties.name}`);\n                            }\n                        },\n                    }).addTo(map);\n                })\n                .catch(error => {\n                    console.error('Error loading GeoJSON:', error);\n                });\n        };\n    \n        // Gọi hàm để tải ranh giới\n        loadBoundaries('./diaphanhuyen.geojson');\n});\n\n"
  },
  "version": 1,
  "widgetId": "om5nji6m2b",
  "widgetName": "Custom1"
}