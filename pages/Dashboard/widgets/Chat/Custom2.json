{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 73,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{\n  \"tips\": [\n    \"Pass data to this widget in the default model field\",\n    \"Access data in the javascript file using the appsmith.model variable\",\n    \"Create events in the widget and trigger them in the javascript file using appsmith.triggerEvent('eventName')\",\n    \"Access data in CSS as var(--appsmith-model-{property-name})\"\n  ],\n\t\"BASE_URL\":\"{{Constants.BACKEND_BASE_URL}}\"\n}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "xzggeu74z0",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 30,
  "mobileLeftColumn": 0,
  "mobileRightColumn": 23,
  "mobileTopRow": 0,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 19.228125,
  "parentId": "ilna59p4dx",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "@import url(\"https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap\");\n* {\n  margin: 0;\n  font-family: \"Montserrat\", serif;\n  border: None;\n  text-decoration: None;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f4f4f9;\n}\n\n.chat-container {\n  width: 100%;\n  height: 600px;\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-header {\n  padding: 10px 15px;\n  background: linear-gradient(to right, #00F2FE 21%, #4FACFE);\n  color: #fff;\n  text-align: center;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n\n.chat-body {\n  display: block;\n  min-height: 90%;\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.message {\n  max-width: 70%;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 14px;\n}\n\n.message.received {\n  background: #f1f0f0;\n  align-self: flex-start;\n}\n\n.message.sent {\n  background: linear-gradient(to right, #00F2FE 10%, #4FACFE);\n  color: white;\n  align-self: flex-end;\n}\n\n.chat-footer {\n  display: flex;\n  padding: 10px;\n  background-color: #f9f9f9;\n  border-top: 1px solid #ddd;\n}\n\n#chat-input {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  margin-right: 10px;\n  font-size: 14px;\n}\n\n#send-button {\n  background: linear-gradient(to right, #00F2FE 21%, #4FACFE);\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n#send-button:hover {\n  background: #5300d6;\n}",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>VKU BOT</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"chat-container\">\n    <div class=\"chat-header\">\n      <h2>VKU BOT</h2>\n    </div>\n    <div class=\"chat-body\">\n       <div class=\"message received\">Chào bạn! Tôi là trợ lý ảo có thể hỗ trợ bạn nắm được thông tin mới nhất về nguy cơ thiên tai ở Việt Nam. </div>\n    </div>\n    <div class=\"chat-footer\">\n      <input type=\"text\" id=\"chat-input\" placeholder=\"Type a message...\" />\n      <button id=\"send-button\">\n        Ask\n      </button>\n    </div>\n  </div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
    "js": "document.addEventListener(\"DOMContentLoaded\", () => {\n  const chatInput = document.getElementById(\"chat-input\");\n  const sendButton = document.getElementById(\"send-button\");\n  const chatBody = document.querySelector(\".chat-body\");\n\n  // Function to append a new message\n  const appendMessage = (message, type) => {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.classList.add(\"message\", type);\n    messageDiv.textContent = message;\n    chatBody.appendChild(messageDiv);\n\n    // Scroll to the bottom of the chat\n    chatBody.scrollTop = chatBody.scrollHeight;\n  };\n\n  // Function to show loading indicator\n  const showLoading = () => {\n    appendMessage(\"Loading...\", \"received\");\n  };\n\n  // Function to remove the last message (e.g., loading indicator)\n  const removeLastMessage = () => {\n    const messages = document.querySelectorAll(\".chat-body .message\");\n    if (messages.length > 0) {\n      chatBody.removeChild(messages[messages.length - 1]);\n    }\n  };\n\n  // Event listener for the send button\n  sendButton.addEventListener(\"click\", async () => {\n    const question = chatInput.value.trim();\n    if (question) {\n      // Append the user's message\n      appendMessage(question, \"sent\");\n      chatInput.value = \"\";\n\n      // Show loading\n      showLoading();\n\n      // Fetch response from the API\n      try {\n        const response = await fetch(\"http://34.67.28.143:1337/api/chatbots\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            data: {\n              question: question\n            }\n          })\n        });\n        const result = await response.json();\n        // Remove loading\n        removeLastMessage();\n\n        // Append the bot's answer\n        if (result.data && result.data.answer) {\n          appendMessage(result.data.answer, \"received\");\n        } else {\n          appendMessage(\"Sorry, I couldn't fetch a response.\", \"received\");\n        }\n      } catch (error) {\n        removeLastMessage();\n        appendMessage(\"Error: Unable to connect to the server.\", \"received\");\n        console.error(\"Fetch error:\", error);\n      }\n    }\n  });\n\n  // Allow sending messages with Enter key\n  chatInput.addEventListener(\"keypress\", e => {\n    if (e.key === \"Enter\") {\n      sendButton.click();\n    }\n  });\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 5,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "@import url('https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100..900;1,100..900&family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap');\n* {\n\tmargin: 0;\n\tfont-family: \"Montserrat\", serif;\n\tborder: None;\n\ttext-decoration: None;\n}\n\nbody {\n  font-family: Arial, sans-serif;\n  margin: 0;\n  padding: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #f4f4f9;\n}\n\n.chat-container {\n  width: 100%;\n  height: 600px;\n  background: #fff;\n  border-radius: 10px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  display: flex;\n  flex-direction: column;\n}\n\n.chat-header {\n  padding: 10px 15px;\n  background: linear-gradient(to right, #00F2FE 21%, #4FACFE);\n  color: #fff;\n  text-align: center;\n  border-top-left-radius: 10px;\n  border-top-right-radius: 10px;\n}\n\n.chat-body {\n\tdisplay:block;\n\tmin-height:90%;\n  flex: 1;\n  padding: 10px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.message {\n  max-width: 70%;\n  padding: 10px;\n  border-radius: 10px;\n  font-size: 14px;\n}\n\n.message.received {\n  background: #f1f0f0;\n  align-self: flex-start;\n}\n\n.message.sent {\n  background: linear-gradient(to right, #00F2FE 10%, #4FACFE);\n  color: white;\n  align-self: flex-end;\n}\n\n.chat-footer {\n  display: flex;\n  padding: 10px;\n  background-color: #f9f9f9;\n  border-top: 1px solid #ddd;\n}\n\n#chat-input {\n  flex: 1;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 10px;\n  margin-right: 10px;\n  font-size: 14px;\n}\n\n#send-button {\n  background: linear-gradient(to right, #00F2FE 21%, #4FACFE);\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  font-size: 14px;\n}\n\n#send-button:hover {\n  background: #5300d6;\n}\n",
    "html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>VKU BOT</title>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n  <div class=\"chat-container\">\n    <div class=\"chat-header\">\n      <h2>VKU BOT</h2>\n    </div>\n    <div class=\"chat-body\">\n       <div class=\"message received\">Chào bạn! Tôi là trợ lý ảo có thể hỗ trợ bạn nắm được thông tin mới nhất về nguy cơ thiên tai ở Việt Nam. </div>\n    </div>\n    <div class=\"chat-footer\">\n      <input type=\"text\" id=\"chat-input\" placeholder=\"Type a message...\" />\n      <button id=\"send-button\">\n        Ask\n      </button>\n    </div>\n  </div>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n",
    "js": "document.addEventListener(\"DOMContentLoaded\", () => {\n  const chatInput = document.getElementById(\"chat-input\");\n  const sendButton = document.getElementById(\"send-button\");\n  const chatBody = document.querySelector(\".chat-body\");\n\n  // Function to append a new message\n  const appendMessage = (message, type) => {\n    const messageDiv = document.createElement(\"div\");\n    messageDiv.classList.add(\"message\", type);\n    messageDiv.textContent = message;\n    chatBody.appendChild(messageDiv);\n\n    // Scroll to the bottom of the chat\n    chatBody.scrollTop = chatBody.scrollHeight;\n  };\n\n  // Function to show loading indicator\n  const showLoading = () => {\n    appendMessage(\"Loading...\", \"received\");\n  };\n\n  // Function to remove the last message (e.g., loading indicator)\n  const removeLastMessage = () => {\n    const messages = document.querySelectorAll(\".chat-body .message\");\n    if (messages.length > 0) {\n      chatBody.removeChild(messages[messages.length - 1]);\n    }\n  };\n\n  // Event listener for the send button\n  sendButton.addEventListener(\"click\", async () => {\n    const question = chatInput.value.trim();\n    if (question) {\n      // Append the user's message\n      appendMessage(question, \"sent\");\n      chatInput.value = \"\";\n\n      // Show loading\n      showLoading();\n\n      // Fetch response from the API\n      try {\n        const response = await fetch(\"http://34.67.28.143:1337/api/chatbots\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            data: {\n              question: question,\n            },\n          }),\n        });\n\n        const result = await response.json();\n        // Remove loading\n        removeLastMessage();\n\n        // Append the bot's answer\n        if (result.data && result.data.answer) {\n          appendMessage(result.data.answer, \"received\");\n        } else {\n          appendMessage(\"Sorry, I couldn't fetch a response.\", \"received\");\n        }\n      } catch (error) {\n        removeLastMessage();\n        appendMessage(\"Error: Unable to connect to the server.\", \"received\");\n        console.error(\"Fetch error:\", error);\n      }\n    }\n  });\n\n  // Allow sending messages with Enter key\n  chatInput.addEventListener(\"keypress\", (e) => {\n    if (e.key === \"Enter\") {\n      sendButton.click();\n    }\n  });\n});\n"
  },
  "version": 1,
  "widgetId": "gterhxxdec",
  "widgetName": "Custom2"
}