{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 79,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{getAllcommunity.data }}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "FIXED",
  "dynamicPropertyPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    }
  ],
  "events": [
    "onResetClick"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "wy4giwctor",
  "leftColumn": 0,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 39,
  "mobileLeftColumn": 9,
  "mobileRightColumn": 32,
  "mobileTopRow": 9,
  "needsErrorInfo": false,
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "parentColumnSpace": 20.125,
  "parentId": "sdbe7q9nm8",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "srcDoc": {
    "css": "@charset \"UTF-8\";\n.app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  background-color: #f0f4f8;\n  align-items: center; /* Căn giữa nội dung */\n}\n\nh2 {\n  text-align: center;\n  /* Căn giữa tiêu đề */\n  margin-bottom: 20px; /* Tạo khoảng cách dưới tiêu đề */\n}\n\n.search-container {\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  /* Đảm bảo khung tìm kiếm chiếm toàn bộ chiều rộng */\n}\n\n.search-container input {\n  width: 20%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  font-size: 14px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.filter-container select,\n.filter-container input {\n  margin-right: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.post-card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n  transition: transform 0.2s;\n  width: 100%; /* Đảm bảo thẻ bài đăng chiếm toàn bộ chiều rộng */\n  max-width: 600px; /* Giới hạn chiều rộng tối đa */\n}\n\n.post-card:hover {\n  transform: scale(1.02);\n}\n\n.post-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.post-content {\n  font-size: 14px;\n  color: #555;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  color: #999;\n}\n\n.post-type {\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n.type-evacuation_guide,\n.type-first_aid_guide,\n.type-safety_guide {\n  color: #28a745; /* Màu xanh lá */\n}\n\n.type-emergency_alert {\n  color: #dc3545; /* Màu đỏ */\n}\n\n.button-container {\n  text-align: right;\n}\n\n.button-container button {\n  margin: 0 10px;\n  border-radius: var(--appsmith-theme-borderRadius);\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n}\n\nbody {\n  background-color: #f7f9fc; /* Màu nền nhẹ cho toàn bộ trang */\n  font-family: Arial, sans-serif; /* Font chữ dễ đọc */\n}\n\n.post-detail {\n  padding: 20px;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  max-width: 800px; /* Tăng chiều rộng tối đa */\n  margin: 20px auto; /* Căn giữa */\n  position: relative; /* Để nút Back có thể được định vị */\n}\n\n.post-card {\n  padding: 20px;\n  border: none; /* Bỏ viền cho card */\n  margin-bottom: 20px;\n}\n\nh2 {\n  margin-bottom: 20px;\n  text-align: center; /* Căn giữa tiêu đề */\n}\n\nstrong {\n  color: #333; /* Màu cho các nhãn */\n}\n\n.post-footer {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.notification-channels {\n  margin-top: 10px;\n}\n\n.notification-channels button {\n  margin: 5px;\n}\n\nbutton {\n  cursor: pointer;\n}\n\n/* Thêm một số kiểu cho các phần tử khác */\np {\n  line-height: 1.6; /* Tăng khoảng cách giữa các dòng */\n  margin: 10px 0; /* Tạo khoảng cách giữa các đoạn */\n}\n\n.delete-post-button {\n  background-color: red; /* Màu nền đỏ */\n  border-color: red; /* Màu viền đỏ */\n  color: white; /* Màu chữ trắng */\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, Input, Form, message, Select } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nconst {\n  Option\n} = Select;\nconst fetchPosts = async () => {\n  const response = await fetch('http://34.67.28.143:1337/api/communities');\n  if (!response.ok) throw new Error('Failed to fetch posts');\n  return await response.json();\n};\nconst PostDetail = ({\n  post,\n  onBack,\n  onEdit,\n  onRefresh\n}) => {\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [form] = Form.useForm();\n  const handleEdit = () => {\n    setIsEditing(true);\n    form.setFieldsValue(post);\n  };\n  const handleSubmit = async values => {\n    const notificationChannels = {\n      sms: values.notificationChannels.includes('sms'),\n      email: values.notificationChannels.includes('email')\n    };\n    const dataToUpdate = {\n      data: {\n        ...values,\n        notificationChannels\n      }\n    };\n    await onEdit(post.documentId, dataToUpdate);\n    message.success('Post updated successfully!');\n    onRefresh();\n    setIsEditing(false);\n  };\n  const handleDeletePost = async () => {\n    try {\n      const response = await fetch(`http://34.67.28.143:1337/api/communities/${post.documentId}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error('Failed to delete post');\n      message.success('Post deleted successfully!');\n      onRefresh();\n      onBack();\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to delete post.');\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-detail\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    onClick: onBack,\n    style: {\n      position: 'absolute',\n      top: '20px',\n      left: '20px'\n    }\n  }, \"Back\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Post Details\"), isEditing ? /*#__PURE__*/React.createElement(Form, {\n    form: form,\n    layout: \"vertical\",\n    onFinish: handleSubmit\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"title\",\n    label: \"* Title\",\n    rules: [{\n      required: true,\n      message: 'Please input the title!'\n    }]\n  }, /*#__PURE__*/React.createElement(Input, null)), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"content\",\n    label: \"* Content\",\n    rules: [{\n      required: true,\n      message: 'Please input the content!'\n    }]\n  }, /*#__PURE__*/React.createElement(Input.TextArea, {\n    rows: 4\n  })), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"type\",\n    label: \"Type\"\n  }, /*#__PURE__*/React.createElement(Select, null, /*#__PURE__*/React.createElement(Option, {\n    value: \"evacuation_guide\"\n  }, \"Evacuation Guide\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"first_aid_guide\"\n  }, \"First Aid Guide\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"safety_guide\"\n  }, \"Safety Guide\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"emergency_alert\"\n  }, \"Emergency Alert\"))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"priority\",\n    label: \"Priority\"\n  }, /*#__PURE__*/React.createElement(Select, null, /*#__PURE__*/React.createElement(Option, {\n    value: \"high\"\n  }, \"High\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"medium\"\n  }, \"Medium\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"low\"\n  }, \"Low\"))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"notificationChannels\",\n    label: \"Notification Channels\"\n  }, /*#__PURE__*/React.createElement(Select, {\n    mode: \"multiple\",\n    placeholder: \"Select notification channels\"\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"email\"\n  }, \"Email\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"sms\"\n  }, \"SMS\"))), /*#__PURE__*/React.createElement(Form.Item, {\n    name: \"attachments\",\n    label: \"Attachments\"\n  }, /*#__PURE__*/React.createElement(Upload, {\n    action: \"/upload\",\n    listType: \"picture\",\n    multiple: true\n  }, /*#__PURE__*/React.createElement(Button, {\n    icon: /*#__PURE__*/React.createElement(UploadOutlined, null)\n  }, \"Upload\"))), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\"\n  }, \"Save\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"default\",\n    onClick: () => setIsEditing(false),\n    style: {\n      marginLeft: '10px'\n    }\n  }, \"Cancel\")) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Title:\"), \" \", post.title), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Content:\"), \" \", post.content), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Type:\"), \" \", post.type.replace('_', ' ')), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Priority:\"), \" \", post.priority), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Notification Channels:\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notification-channels\"\n  }, post.notificationChannels && Object.keys(post.notificationChannels).map(channel => /*#__PURE__*/React.createElement(Button, {\n    key: channel\n  }, channel))), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Created At:\"), \" \", new Date(post.createdAt).toLocaleString()), /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Updated At:\"), \" \", new Date(post.updatedAt).toLocaleString()), /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    onClick: handleEdit\n  }, \"Edit Post\"), /*#__PURE__*/React.createElement(Button, {\n    className: \"delete-post-button\",\n    type: \"danger\",\n    onClick: handleDeletePost,\n    style: {\n      marginLeft: '10px'\n    }\n  }, \"Delete Post\")));\n};\nconst App = () => {\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const [selectedType, setSelectedType] = React.useState('all');\n  const [selectedPriority, setSelectedPriority] = React.useState('all');\n  const [startDate, setStartDate] = React.useState('');\n  const [endDate, setEndDate] = React.useState('');\n  const [sortOrder, setSortOrder] = React.useState('asc');\n  const [selectedPost, setSelectedPost] = React.useState(null);\n  const [isCreatingPost, setIsCreatingPost] = React.useState(false);\n  const [data, setData] = React.useState([]);\n  const fetchData = async () => {\n    try {\n      const result = await fetchPosts();\n      setData(result.data);\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to load posts.');\n    }\n  };\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n  const filteredData = data.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === 'all' || post.type === selectedType;\n    const matchesPriority = selectedPriority === 'all' || post.priority === selectedPriority;\n    return matchesSearch && matchesType && matchesPriority;\n  });\n  const sortedData = filteredData.sort((a, b) => {\n    const dateA = new Date(a.createdAt);\n    const dateB = new Date(b.createdAt);\n    return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;\n  });\n  const handleViewPost = post => setSelectedPost(post);\n  const handleBack = () => {\n    setSelectedPost(null);\n    setIsCreatingPost(false);\n  };\n  const handleEditPost = async (id, values) => {\n    try {\n      const response = await fetch(`http://34.67.28.143:1337/api/communities/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(values)\n      });\n      if (!response.ok) throw new Error('Failed to update post');\n      message.success('Post updated successfully!');\n      fetchData();\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to update post.');\n    }\n  };\n  const handleAddNewPost = () => setIsCreatingPost(true);\n  const handleSubmit = async values => {\n    const notificationChannels = {\n      sms: values.notificationChannels.includes('sms'),\n      email: values.notificationChannels.includes('email')\n    };\n    const dataToCreate = {\n      data: {\n        ...values,\n        notificationChannels\n      }\n    };\n    try {\n      const response = await fetch('http://34.67.28.143:1337/api/communities', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(dataToCreate)\n      });\n      if (!response.ok) throw new Error('Failed to create post');\n      message.success('Post created successfully!');\n      fetchData();\n      handleBack();\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to create post.');\n    }\n  };\n  if (selectedPost) {\n    return /*#__PURE__*/React.createElement(PostDetail, {\n      post: selectedPost,\n      onBack: handleBack,\n      onEdit: handleEditPost,\n      onRefresh: fetchData\n    });\n  }\n  if (isCreatingPost) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"post-new-community\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"link\",\n      onClick: handleBack,\n      style: {\n        position: 'absolute',\n        top: '20px',\n        left: '20px'\n      }\n    }, \"Back\"), /*#__PURE__*/React.createElement(\"h2\", null, \"Create New Post\"), /*#__PURE__*/React.createElement(Form, {\n      layout: \"vertical\",\n      onFinish: handleSubmit\n    }, /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"title\",\n      label: \"* Title\",\n      rules: [{\n        required: true,\n        message: 'Please input the title!'\n      }]\n    }, /*#__PURE__*/React.createElement(Input, null)), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"content\",\n      label: \"* Content\",\n      rules: [{\n        required: true,\n        message: 'Please input the content!'\n      }]\n    }, /*#__PURE__*/React.createElement(Input.TextArea, {\n      rows: 4\n    })), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"type\",\n      label: \"Type\"\n    }, /*#__PURE__*/React.createElement(Select, null, /*#__PURE__*/React.createElement(Option, {\n      value: \"evacuation_guide\"\n    }, \"Evacuation Guide\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"first_aid_guide\"\n    }, \"First Aid Guide\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"safety_guide\"\n    }, \"Safety Guide\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"emergency_alert\"\n    }, \"Emergency Alert\"))), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"priority\",\n      label: \"Priority\"\n    }, /*#__PURE__*/React.createElement(Select, null, /*#__PURE__*/React.createElement(Option, {\n      value: \"high\"\n    }, \"High\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"medium\"\n    }, \"Medium\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"low\"\n    }, \"Low\"))), /*#__PURE__*/React.createElement(Form.Item, {\n      name: \"notificationChannels\",\n      label: \"Notification Channels\"\n    }, /*#__PURE__*/React.createElement(Select, {\n      mode: \"multiple\",\n      placeholder: \"Select notification channels\"\n    }, /*#__PURE__*/React.createElement(Option, {\n      value: \"email\"\n    }, \"Email\"), /*#__PURE__*/React.createElement(Option, {\n      value: \"sms\"\n    }, \"SMS\"))), /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\"\n    }, \"Create Post\")));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\"\n  }, /*#__PURE__*/React.createElement(\"h2\", null, \"Community Posts\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"search-container\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Search posts...\",\n    value: searchTerm,\n    onChange: e => setSearchTerm(e.target.value)\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"filter-container\"\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedType,\n    onChange: e => setSelectedType(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\"\n  }, \"All Types\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"evacuation_guide\"\n  }, \"Evacuation Guide\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"first_aid_guide\"\n  }, \"First Aid Guide\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"safety_guide\"\n  }, \"Safety Guide\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"emergency_alert\"\n  }, \"Emergency Alert\")), /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedPriority,\n    onChange: e => setSelectedPriority(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"all\"\n  }, \"All Priorities\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"high\"\n  }, \"High\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"medium\"\n  }, \"Medium\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"low\"\n  }, \"Low\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"urgent\"\n  }, \"Urgent\")), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: startDate,\n    onChange: e => setStartDate(e.target.value),\n    placeholder: \"Start Date\"\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"date\",\n    value: endDate,\n    onChange: e => setEndDate(e.target.value),\n    placeholder: \"End Date\"\n  }), /*#__PURE__*/React.createElement(\"select\", {\n    value: sortOrder,\n    onChange: e => setSortOrder(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"asc\"\n  }, \"Sort by Date (Asc)\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"desc\"\n  }, \"Sort by Date (Desc)\"))), sortedData.map(post => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-card\",\n    key: post.id\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-title\"\n  }, post.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-content\"\n  }, post.content), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-attachments\"\n  }, post.attachments ? post.attachments.map((attachment, index) => {\n    const imageUrl = `http://34.67.28.143:1337${attachment.formats.small.url}`;\n    console.log(imageUrl);\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: index,\n      src: imageUrl,\n      alt: `Attachment ${index}`,\n      style: {\n        width: '50px',\n        height: '50px'\n      }\n    });\n  }) : /*#__PURE__*/React.createElement(\"p\", null, \"No attachments available.\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"post-footer\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, new Date(post.createdAt).toLocaleDateString()), /*#__PURE__*/React.createElement(\"span\", {\n    className: `post-type type-${post.type}`\n  }, post.type.replace('_', ' ')), /*#__PURE__*/React.createElement(Button, {\n    type: \"link\",\n    onClick: () => handleViewPost(post)\n  }, \"Details\")))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    className: \"primary\",\n    onClick: handleAddNewPost\n  }, \"Add New Post\")));\n};\nappsmith.onReady(() => {\n  reactDom.render( /*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 0,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".app {\n  height: calc(var(--appsmith-ui-height) * 1px);\n  width: calc(var(--appsmith-ui-width) * 1px);\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  background-color: #f0f4f8;\n  align-items: center; /* Căn giữa nội dung */\n}\n\nh2 {\n  text-align: center; \n\t/* Căn giữa tiêu đề */\n  margin-bottom: 20px; /* Tạo khoảng cách dưới tiêu đề */\n}\n\n.search-container {\n  margin-bottom: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%; \n\t/* Đảm bảo khung tìm kiếm chiếm toàn bộ chiều rộng */\n}\n\n.search-container input {\n  width: 20%;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  font-size: 14px;\n}\n\n.filter-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.filter-container select,\n.filter-container input {\n  margin-right: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\n.post-card {\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  margin-bottom: 15px;\n  padding: 15px;\n  transition: transform 0.2s;\n  width: 100%; /* Đảm bảo thẻ bài đăng chiếm toàn bộ chiều rộng */\n  max-width: 600px; /* Giới hạn chiều rộng tối đa */\n}\n\n.post-card:hover {\n  transform: scale(1.02);\n}\n\n.post-title {\n  font-size: 18px;\n  font-weight: bold;\n  margin-bottom: 10px;\n  color: #333;\n}\n\n.post-content {\n  font-size: 14px;\n  color: #555;\n}\n\n.post-footer {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 10px;\n  color: #999;\n}\n\n.post-type {\n  font-size: 12px;\n  margin-top: 5px;\n}\n\n.type-evacuation_guide,\n.type-first_aid_guide,\n.type-safety_guide {\n  color: #28a745; /* Màu xanh lá */\n}\n\n.type-emergency_alert {\n  color: #dc3545; /* Màu đỏ */\n}\n\n.button-container {\n  text-align: right;\n}\n\n.button-container button {\n  margin: 0 10px;\n  border-radius: var(--appsmith-theme-borderRadius);\n}\n\n.button-container button.primary {\n  background: var(--appsmith-theme-primaryColor) !important;\n}\n\nbody {\n  background-color: #f7f9fc; /* Màu nền nhẹ cho toàn bộ trang */\n  font-family: Arial, sans-serif; /* Font chữ dễ đọc */\n}\n\n.post-detail {\n  padding: 20px;\n  background: #ffffff;\n  border-radius: 8px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  max-width: 800px; /* Tăng chiều rộng tối đa */\n  margin: 20px auto; /* Căn giữa */\n  position: relative; /* Để nút Back có thể được định vị */\n}\n\n.post-card {\n  padding: 20px;\n  border: none; /* Bỏ viền cho card */\n  margin-bottom: 20px;\n}\n\nh2 {\n  margin-bottom: 20px;\n  text-align: center; /* Căn giữa tiêu đề */\n}\n\nstrong {\n  color: #333; /* Màu cho các nhãn */\n}\n\n.post-footer {\n  margin-top: 20px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.notification-channels {\n  margin-top: 10px;\n}\n\n.notification-channels button {\n  margin: 5px;\n}\n\nbutton {\n  cursor: pointer;\n}\n\n/* Thêm một số kiểu cho các phần tử khác */\np {\n  line-height: 1.6; /* Tăng khoảng cách giữa các dòng */\n  margin: 10px 0; /* Tạo khoảng cách giữa các đoạn */\n}\n.delete-post-button {\n  background-color: red; /* Màu nền đỏ */\n  border-color: red; /* Màu viền đỏ */\n  color: white; /* Màu chữ trắng */\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Button, Input, Form, message, Select } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\n\nconst { Option } = Select;\n\nconst fetchPosts = async () => {\n  const response = await fetch('http://34.67.28.143:1337/api/communities');\n  if (!response.ok) throw new Error('Failed to fetch posts');\n  return await response.json();\n};\n\nconst PostDetail = ({ post, onBack, onEdit, onRefresh }) => {\n  const [isEditing, setIsEditing] = React.useState(false);\n  const [form] = Form.useForm();\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    form.setFieldsValue(post);\n  };\n\n  const handleSubmit = async (values) => {\n    const notificationChannels = {\n      sms: values.notificationChannels.includes('sms'),\n      email: values.notificationChannels.includes('email'),\n    };\n\n    const dataToUpdate = { data: { ...values, notificationChannels } };\n\n    await onEdit(post.documentId, dataToUpdate);\n    message.success('Post updated successfully!');\n    onRefresh();\n    setIsEditing(false);\n  };\n\n  const handleDeletePost = async () => {\n    try {\n      const response = await fetch(`http://34.67.28.143:1337/api/communities/${post.documentId}`, {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      if (!response.ok) throw new Error('Failed to delete post');\n      message.success('Post deleted successfully!');\n      onRefresh();\n      onBack();\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to delete post.');\n    }\n  };\n\n  return (\n    <div className=\"post-detail\">\n      <Button type=\"link\" onClick={onBack} style={{ position: 'absolute', top: '20px', left: '20px' }}>\n        Back\n      </Button>\n      <h2>Post Details</h2>\n      {isEditing ? (\n        <Form form={form} layout=\"vertical\" onFinish={handleSubmit}>\n          <Form.Item name=\"title\" label=\"* Title\" rules={[{ required: true, message: 'Please input the title!' }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item name=\"content\" label=\"* Content\" rules={[{ required: true, message: 'Please input the content!' }]}>\n            <Input.TextArea rows={4} />\n          </Form.Item>\n          <Form.Item name=\"type\" label=\"Type\">\n            <Select>\n              <Option value=\"evacuation_guide\">Evacuation Guide</Option>\n              <Option value=\"first_aid_guide\">First Aid Guide</Option>\n              <Option value=\"safety_guide\">Safety Guide</Option>\n              <Option value=\"emergency_alert\">Emergency Alert</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"priority\" label=\"Priority\">\n            <Select>\n              <Option value=\"high\">High</Option>\n              <Option value=\"medium\">Medium</Option>\n              <Option value=\"low\">Low</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"notificationChannels\" label=\"Notification Channels\">\n            <Select mode=\"multiple\" placeholder=\"Select notification channels\">\n              <Option value=\"email\">Email</Option>\n              <Option value=\"sms\">SMS</Option>\n            </Select>\n          </Form.Item>\n\t\t\t  <Form.Item name=\"attachments\" label=\"Attachments\">\n            <Upload action=\"/upload\" listType=\"picture\" multiple>\n              <Button icon={<UploadOutlined />}>Upload</Button>\n            </Upload>\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">Save</Button>\n          <Button type=\"default\" onClick={() => setIsEditing(false)} style={{ marginLeft: '10px' }}>\n            Cancel\n          </Button>\n        </Form>\n      ) : (\n        <>\n          <p><strong>Title:</strong> {post.title}</p>\n          <p><strong>Content:</strong> {post.content}</p>\n          <p><strong>Type:</strong> {post.type.replace('_', ' ')}</p>\n          <p><strong>Priority:</strong> {post.priority}</p>\n          <p><strong>Notification Channels:</strong></p>\n          <div className=\"notification-channels\">\n            {post.notificationChannels && Object.keys(post.notificationChannels).map(channel => (\n              <Button key={channel}>{channel}</Button>\n            ))}\n          </div>\n          <p><strong>Created At:</strong> {new Date(post.createdAt).toLocaleString()}</p>\n          <p><strong>Updated At:</strong> {new Date(post.updatedAt).toLocaleString()}</p>\n\t\t\n          <Button type=\"primary\" onClick={handleEdit}>Edit Post</Button>\n          <Button className=\"delete-post-button\" type=\"danger\" onClick={handleDeletePost} style={{ marginLeft: '10px' }}>\n            Delete Post\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const [selectedType, setSelectedType] = React.useState('all');\n  const [selectedPriority, setSelectedPriority] = React.useState('all');\n  const [startDate, setStartDate] = React.useState('');\n  const [endDate, setEndDate] = React.useState('');\n  const [sortOrder, setSortOrder] = React.useState('asc');\n  const [selectedPost, setSelectedPost] = React.useState(null);\n  const [isCreatingPost, setIsCreatingPost] = React.useState(false);\n  const [data, setData] = React.useState([]);\n\n  const fetchData = async () => {\n    try {\n      const result = await fetchPosts();\n      setData(result.data);\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to load posts.');\n    }\n  };\n\n  React.useEffect(() => {\n    fetchData();\n  }, []);\n\n  const filteredData = data.filter(post => {\n    const matchesSearch = post.title.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesType = selectedType === 'all' || post.type === selectedType;\n    const matchesPriority = selectedPriority === 'all' || post.priority === selectedPriority;\n    return matchesSearch && matchesType && matchesPriority;\n  });\n\n  const sortedData = filteredData.sort((a, b) => {\n    const dateA = new Date(a.createdAt);\n    const dateB = new Date(b.createdAt);\n    return sortOrder === 'asc' ? dateA - dateB : dateB - dateA;\n  });\n\n  const handleViewPost = (post) => setSelectedPost(post);\n  const handleBack = () => {\n    setSelectedPost(null);\n    setIsCreatingPost(false);\n  };\n\n  const handleEditPost = async (id, values) => {\n    try {\n      const response = await fetch(`http://34.67.28.143:1337/api/communities/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(values),\n      });\n\n      if (!response.ok) throw new Error('Failed to update post');\n      message.success('Post updated successfully!');\n      fetchData();\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to update post.');\n    }\n  };\n\n  const handleAddNewPost = () => setIsCreatingPost(true);\n\n  const handleSubmit = async (values) => {\n    const notificationChannels = {\n      sms: values.notificationChannels.includes('sms'),\n      email: values.notificationChannels.includes('email'),\n    };\n\n    const dataToCreate = { data: { ...values, notificationChannels } };\n\n    try {\n      const response = await fetch('http://34.67.28.143:1337/api/communities', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(dataToCreate),\n      });\n\n      if (!response.ok) throw new Error('Failed to create post');\n      message.success('Post created successfully!');\n      fetchData();\n      handleBack();\n    } catch (error) {\n      console.error(error);\n      message.error('Failed to create post.');\n    }\n  };\n\n  if (selectedPost) {\n    return <PostDetail post={selectedPost} onBack={handleBack} onEdit={handleEditPost} onRefresh={fetchData} />;\n  }\n\n  if (isCreatingPost) {\n    return (\n      <div className=\"post-new-community\">\n        <Button type=\"link\" onClick={handleBack} style={{ position: 'absolute', top: '20px', left: '20px' }}>\n          Back\n        </Button>\n        <h2>Create New Post</h2>\n        <Form layout=\"vertical\" onFinish={handleSubmit}>\n          <Form.Item name=\"title\" label=\"* Title\" rules={[{ required: true, message: 'Please input the title!' }]}>\n            <Input />\n          </Form.Item>\n          <Form.Item name=\"content\" label=\"* Content\" rules={[{ required: true, message: 'Please input the content!' }]}>\n            <Input.TextArea rows={4} />\n          </Form.Item>\n          <Form.Item name=\"type\" label=\"Type\">\n            <Select>\n              <Option value=\"evacuation_guide\">Evacuation Guide</Option>\n              <Option value=\"first_aid_guide\">First Aid Guide</Option>\n              <Option value=\"safety_guide\">Safety Guide</Option>\n              <Option value=\"emergency_alert\">Emergency Alert</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"priority\" label=\"Priority\">\n            <Select>\n              <Option value=\"high\">High</Option>\n              <Option value=\"medium\">Medium</Option>\n              <Option value=\"low\">Low</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"notificationChannels\" label=\"Notification Channels\">\n            <Select mode=\"multiple\" placeholder=\"Select notification channels\">\n              <Option value=\"email\">Email</Option>\n              <Option value=\"sms\">SMS</Option>\n            </Select>\n          </Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">Create Post</Button>\n        </Form>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"app\">\n      <h2>Community Posts</h2>\n      <div className=\"search-container\">\n        <input \n          type=\"text\" \n          placeholder=\"Search posts...\" \n          value={searchTerm} \n          onChange={(e) => setSearchTerm(e.target.value)} \n        />\n      </div>\n      <div className=\"filter-container\">\n        <select value={selectedType} onChange={(e) => setSelectedType(e.target.value)}>\n          <option value=\"all\">All Types</option>\n          <option value=\"evacuation_guide\">Evacuation Guide</option>\n          <option value=\"first_aid_guide\">First Aid Guide</option>\n          <option value=\"safety_guide\">Safety Guide</option>\n          <option value=\"emergency_alert\">Emergency Alert</option>\n        </select>\n        <select value={selectedPriority} onChange={(e) => setSelectedPriority(e.target.value)}>\n          <option value=\"all\">All Priorities</option>\n          <option value=\"high\">High</option>\n          <option value=\"medium\">Medium</option>\n          <option value=\"low\">Low</option>\n          <option value=\"urgent\">Urgent</option>\n        </select>\n        <input \n          type=\"date\" \n          value={startDate} \n          onChange={(e) => setStartDate(e.target.value)} \n          placeholder=\"Start Date\" \n        />\n        <input \n          type=\"date\" \n          value={endDate} \n          onChange={(e) => setEndDate(e.target.value)} \n          placeholder=\"End Date\" \n        />\n        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>\n          <option value=\"asc\">Sort by Date (Asc)</option>\n          <option value=\"desc\">Sort by Date (Desc)</option>\n        </select>\n      </div>\n      {sortedData.map((post) => (\n        <div className=\"post-card\" key={post.id}>\n          <div className=\"post-title\">{post.title}</div>\n          <div className=\"post-content\">{post.content}</div>\n\t\t\t\t\t<div className=\"post-attachments\">\n    {post.attachments ? (\n        post.attachments.map((attachment, index) => {\n            const imageUrl = `http://34.67.28.143:1337${attachment.formats.small.url}`;\n            console.log(imageUrl); \n            return (\n                <img \n                    key={index} \n                    src={imageUrl} \n                    alt={`Attachment ${index}`} \n                    style={{ width: '50px', height: '50px' }} \n                />\n            );\n        })\n    ) : (\n        \n\t\t\t\t\t<p>No attachments available.</p>\n    )\n\t\t}\n</div>\n          <div className=\"post-footer\">\n            <span>{new Date(post.createdAt).toLocaleDateString()}</span>\n            <span className={`post-type type-${post.type}`}>{post.type.replace('_', ' ')}</span>\n            <Button type=\"link\" onClick={() => handleViewPost(post)}>\n              Details\n            </Button>\n          </div>\n        </div>\n      ))}\n      <div className=\"button-container\">\n        <Button className=\"primary\" onClick={handleAddNewPost}>Add New Post</Button>\n      </div>\n    </div>\n  );\n}\n\nappsmith.onReady(() => {\n  reactDom.render(<App />, document.getElementById(\"root\"));\n});"
  },
  "version": 1,
  "widgetId": "wy3e6ciojj",
  "widgetName": "Custom1"
}